package ${ctx.implPackage};

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import ${ctx.daoPackage}.${ctx.daoClass};
import ${ctx.modelPackage}.${ctx.modelClass};
import ${ctx.servicePackage}.${ctx.serviceClass};

import com.greatwall.health.business.db.common.Global;
import com.greatwall.health.business.tool.RedisReplaceService;
import com.greatwall.health.framework.activemq.service.IMessageProducerService;
import com.greatwall.health.framework.model.BaseModel;

import lombok.extern.slf4j.Slf4j;
import xingkong.tool.core.JsonTool;
import xingkong.tool.core.OSTool;
import xingkong.tool.core.web.form.PageForm;


@Slf4j
@Service
public class ${ctx.implClass} implements ${ctx.serviceClass} {

    @Autowired
    ${ctx.daoClass} ${ctx.daoObj};
    
   	@Autowired
	RedisReplaceService redisNameService;

	@Autowired
	IMessageProducerService producer;
    

    /**
     * 查看${ctx.tableCN}列表
     * @param ${ctx.modelObj} ${ctx.tableCN}表单参数
     * @param pageForm
     * @return
     */
    @Override
    public PageInfo<${ctx.modelClass}> list(${ctx.modelClass} ${ctx.modelObj},  PageForm pageForm) {
        if (pageForm.getPageNo() != null && pageForm.getPageSize() != null) {
            PageHelper.startPage(pageForm.getPageNo(), pageForm.getPageSize());
        }
        List<${ctx.modelClass}> ${ctx.modelObj}List = ${ctx.daoObj}.select(${ctx.modelObj});
        
        // 返回分页对象
        PageInfo<${ctx.modelClass}> ${ctx.modelObj}PageInfo = new PageInfo<>(${ctx.modelObj}List);
        
        return ${ctx.modelObj}PageInfo;
    }
    
    /**
     * 查看${ctx.tableCN}单条记录
     * @param ${ctx.modelObj} ${ctx.tableCN}表单参数
     * @return 
     */
    @Override
    public ${ctx.modelClass} view(${ctx.modelClass} ${ctx.modelObj}) {
        return ${ctx.daoObj}.selectOne(${ctx.modelObj});
    }
    
    /**
     * 新增${ctx.tableCN}单条记录
     * @param ${ctx.modelObj} ${ctx.tableCN}表单参数
     * @return 
     */
    @Override
    public int add(${ctx.modelClass} ${ctx.modelObj}) {
        int id = ${ctx.daoObj}.insertSelective(${ctx.modelObj});
        return id;
    }

    /**
     * 删除${ctx.tableCN}单条记录
     * @param ${ctx.modelObj} ${ctx.tableCN}表单参数
     * @return 
     */
    @Override
    @Transactional
    public void delete(${ctx.modelClass} ${ctx.modelObj}) {
        if (${ctx.modelObj} != null) {
            ${ctx.daoObj}.delete(${ctx.modelObj});
        }
    }

    /**
     * 更新${ctx.tableCN}单条记录
     * @param ${ctx.modelObj} ${ctx.tableCN}表单参数
     * @return 
     */
    @Override
    @Transactional
    public void update(${ctx.modelClass} ${ctx.modelObj}) {
        if ( ${ctx.modelObj} != null) {
            ${ctx.daoObj}.updateByPrimaryKeySelective(${ctx.modelObj});
        }
    }

	/**
     * 新增${ctx.tableCN}多条记录
     * @param ${ctx.modelObj}List ${ctx.tableCN}列表
     * @return 
     */
    @Override
    public void addBatch(List<${ctx.modelClass}> ${ctx.modelObj}List) {
        ${ctx.daoObj}.addBatch(${ctx.modelObj}List);
    }


 	/**
     * 处理${ctx.tableCN}脱敏 
     */
	@Override
	public void process() throws UnsupportedEncodingException {
		${ctx.modelClass} ${ctx.modelObj} = new ${ctx.modelClass}();
		PageForm pageForm = new PageForm();
		log.info("[${ctx.tableVo.tableName}] ${ctx.tableCN}开始脱敏。");
		int i = 1;
		while(true) {
			log.info("[${ctx.tableVo.tableName}]" + i + "次获取数据");
			pageForm.setPageNo(i);
			pageForm.setPageSize(Global.PAGE_SIZE);

			PageInfo<${ctx.modelClass}> pageInfo = list(${ctx.modelObj}, pageForm);

			for (${ctx.modelClass} cur${ctx.modelObj} : pageInfo.getList()) {
				// 替换姓名
				// String orginName = cur${ctx.modelObj}.getXM();
				// String newName = redisNameService.replaceName(orginName);
				// cur${ctx.modelObj}.setXM(newName);

				log.info("[脱敏]"+orginName +"=>" +newName + "");
			}
			BaseModel baseModel = new BaseModel();
			baseModel.setType(Global.Type.${ctx.tableVo.tableName});
			baseModel.setContent(JsonTool.toJSONString(pageInfo.getList()));
			String message = JsonTool.toJSONString(baseModel);
			//log.info(message);
			producer.sendMessage(message);
			log.info("[脱敏]处理完第"+ pageInfo.getPageNum()+"页");

			if (pageInfo.getSize() < Global.PAGE_SIZE) {
				break;
			}

			i++;
			OSTool.sleepms(100);
		}
		log.info("[${ctx.tableVo.tableName}] ${ctx.tableCN}结束脱敏。");
	}


}